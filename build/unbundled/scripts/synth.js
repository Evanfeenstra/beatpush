function frequencyFromNoteNumber(e){return 440*Math.pow(2,(e-69)/12)}function filterFrequencyFromCutoff(e,t){var i=.5*Audiocontext.sampleRate,n=Math.pow(2,9*t-1)*e;return n>i&&(n=i),n}function Voice(e,t){this.originalFrequency=frequencyFromNoteNumber(e),this.osc1=Audiocontext.createOscillator(),this.updateOsc1Frequency(),this.osc1.type=_S.Osc1Waveform,this.osc1Gain=Audiocontext.createGain(),this.osc1Gain.gain.value=.005*_S.Osc1Mix,this.osc1.connect(this.osc1Gain),this.osc2=Audiocontext.createOscillator(),this.updateOsc2Frequency(),this.osc2.type=_S.Osc2Waveform,this.osc2Gain=Audiocontext.createGain(),this.osc2Gain.gain.value=.005*_S.Osc2Mix,this.osc2.connect(this.osc2Gain),this.modOsc=Audiocontext.createOscillator(),this.modOsc.type=_S.ModWaveform,this.modOsc.frequency.value=_S.ModFrequency/10*_S.modOscFreqMultiplier,this.filter1=Audiocontext.createBiquadFilter(),this.filter1.type="lowpass",this.filter1.Q.value=_S.FilterQ,this.osc1Gain.connect(this.filter1),this.osc2Gain.connect(this.filter1),this.modFilterGain=Audiocontext.createGain(),this.modOsc.connect(this.modFilterGain),this.modFilterGain.gain.value=10*_S.FilterMod,this.modFilterGain.connect(this.filter1.detune),this.envelope=Audiocontext.createGain(),this.filter1.connect(this.envelope),this.envelope.connect(effectChain);var i=Audiocontext.currentTime,n=i+_S.EnvA/20;this.envelope.gain.value=0,this.envelope.gain.setValueAtTime(0,i),this.envelope.gain.linearRampToValueAtTime(1,n),this.envelope.gain.setTargetAtTime(_S.EnvS/100,n,_S.EnvD/100+.001);var o=this.originalFrequency,c=filterFrequencyFromCutoff(o,_S.FilterCutoff/100),r=filterFrequencyFromCutoff(o,_S.FilterCutoff/100+_S.FilterEnv/120),s=filterFrequencyFromCutoff(o,_S.FilterCutoff/100+_S.FilterEnv/120*(_S.FilterEnvS/100)),u=i+_S.FilterEnvA/20;this.filter1.frequency.value=c,this.filter1.frequency.setValueAtTime(c,i),this.filter1.frequency.linearRampToValueAtTime(r,u),this.filter1.frequency.setTargetAtTime(s,u,_S.FilterEnvD/100),this.osc1.start(0),this.osc2.start(0),this.modOsc.start(0)}function changeModMultiplier(){_S.modOscFreqMultiplier=(moDouble?2:1)*(moQuadruple?4:1),onModFrequency(_S.ModFrequency)}function onChangeOctave(e){_S.Octave=e.target.selectedIndex}var voices=new Array,_S={ModWaveform:"sine",ModFrequency:0,oscwaves:["sine","square","sawtooth","triangle"],Osc1Waveform:"square",Osc1Octave:1,Osc1Detune:5,Osc1Mix:80,Osc2Waveform:"triangle",Osc2Octave:1,Osc2Detune:-5,Osc2Mix:80,FilterCutoff:45,FilterQ:7,FilterMod:0,FilterEnv:0,EnvA:2,EnvD:15,EnvS:100,EnvR:10,FilterEnvA:2,FilterEnvD:15,FilterEnvS:50,FilterEnvR:10,Vol:99,effectChain:null,waveshaper:null,volNode:null,Octave:3,modOscFreqMultiplier:1,moDouble:!1,moQuadruple:!1,noteOn:function(e,t){null==voices[e]&&(voices[e]=new Voice(e,t))},noteOff:function(e){null!=voices[e]&&(voices[e].noteOff(),voices[e]=null)},onModWaveform:function(e){_S.ModWaveform=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setModWaveform(_S.ModWaveform)},onModFrequency:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.ModFrequency=e;for(var t=_S.ModFrequency*_S.modOscFreqMultiplier,i=0;i<255;i++)null!=voices[i]&&voices[i].updateModFrequency(t)},onFilterCutoff:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.FilterCutoff=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setFilterCutoff(e)},onFilterQ:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.FilterQ=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setFilterQ(e)},onFilterMod:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.FilterMod=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setFilterMod(e)},onFilterEnv:function(e){_S.FilterEnv=e},onOsc1Wave:function(e){_S.Osc1Waveform=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setOsc1Waveform(_S.Osc1Waveform)},onOsc1Octave:function(e){_S.Osc1Octave=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].updateOsc1Frequency()},onOsc1Mix:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.Osc1Mix=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].updateOsc1Mix(e)},onOsc2Wave:function(e){_S.Osc2Waveform=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].setOsc2Waveform(_S.Osc2Waveform)},onOsc2Octave:function(e){_S.Osc2Octave=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].updateOsc2Frequency()},onOsc2Mix:function(e){e.currentTarget&&(e=e.currentTarget.value),_S.Osc2Mix=e;for(var t=0;t<255;t++)null!=voices[t]&&voices[t].updateOsc2Mix(e)},onEnvA:function(e){_S.EnvA=e},onEnvD:function(e){_S.EnvD=e},onEnvS:function(e){_S.EnvS=e},onEnvR:function(e){_S.EnvR=e},onFilterEnvA:function(e){_S.FilterEnvA=e},onFilterEnvD:function(e){_S.FilterEnvD=e},onFilterEnvS:function(e){_S.FilterEnvS=e},onFilterEnvR:function(e){_S.FilterEnvR=e},onDrive:function(e){_S.Drive=e,waveshaper.setDrive(.01+_S.Drive*_S.Drive/500)},onVolume:function(e){volNode.gain.value=e/100},onReverb:function(e){e/=100;Math.cos(.5*e*Math.PI),Math.cos(.5*(1-e)*Math.PI)}};Voice.prototype.setModWaveform=function(e){this.modOsc.type=e},Voice.prototype.updateModFrequency=function(e){this.modOsc.frequency.value=e/10},Voice.prototype.setOsc1Waveform=function(e){this.osc1.type=e},Voice.prototype.updateOsc1Frequency=function(e){this.osc1.frequency.value=this.originalFrequency*Math.pow(2,_S.Osc1Octave-2)},Voice.prototype.updateOsc1Mix=function(e){this.osc1Gain.gain.value=.005*e},Voice.prototype.setOsc2Waveform=function(e){this.osc2.type=e},Voice.prototype.updateOsc2Frequency=function(e){this.osc2.frequency.value=this.originalFrequency*Math.pow(2,_S.Osc2Octave-1)},Voice.prototype.updateOsc2Mix=function(e){this.osc2Gain.gain.value=.005*e},Voice.prototype.setFilterCutoff=function(e){var t=Audiocontext.currentTime,i=filterFrequencyFromCutoff(this.originalFrequency,e/100);this.filter1.frequency.cancelScheduledValues(t),this.filter1.frequency.setValueAtTime(i,t)},Voice.prototype.setFilterQ=function(e){this.filter1.Q.value=e},Voice.prototype.setFilterMod=function(e){this.modFilterGain.gain.value=10*_S.FilterMod},Voice.prototype.noteOff=function(){var e=Audiocontext.currentTime,t=e+_S.EnvR/10,i=filterFrequencyFromCutoff(this.originalFrequency,_S.FilterCutoff/100*(1-_S.FilterEnv/100));this.envelope.gain.cancelScheduledValues(e),this.envelope.gain.setValueAtTime(this.envelope.gain.value,e),this.envelope.gain.setTargetAtTime(0,e,_S.EnvR/100),this.filter1.frequency.cancelScheduledValues(e),this.filter1.frequency.setValueAtTime(this.filter1.frequency.value,e),this.filter1.frequency.setTargetAtTime(i,e,_S.FilterEnvR/100),this.osc1.stop(t),this.osc2.stop(t)},initSynth=function(){effectChain=Audiocontext.createGain(),effectChain.connect(Synth.filter_yo)};